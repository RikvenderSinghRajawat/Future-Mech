admin.css is { /* Admin Dashboard Specific Styles */
.dashboard-container {
    min-height: 100vh;
    background-color: #f8f9fa;
}

.dashboard-header {
    background: linear-gradient(135deg, #1a56db 0%, #0e7490 100%);
    color: white;
    padding: 2rem 0;
}

.dashboard-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
}

.dashboard-subtitle {
    opacity: 0.9;
    margin-bottom: 0;
}

.dashboard-actions .btn {
    margin-left: 0.5rem;
}

.dashboard-card {
    background: white;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
}

.card-header {
    padding: 1.5rem;
    border-bottom: 1px solid #e9ecef;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.card-title {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
}

.card-body {
    padding: 1.5rem;
}

/* Stat Cards */
.stat-card {
    background: white;
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
}

.stat-icon {
    width: 60px;
    height: 60px;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
    font-size: 1.5rem;
}

.stat-icon.bg-primary { background: #e3f2fd; color: #1976d2; }
.stat-icon.bg-success { background: #e8f5e8; color: #388e3c; }
.stat-icon.bg-warning { background: #fff3e0; color: #f57c00; }
.stat-icon.bg-danger { background: #ffebee; color: #d32f2f; }
.stat-icon.bg-info { background: #e0f2f1; color: #00796b; }

.stat-number {
    font-size: 2rem;
    font-weight: 700;
    line-height: 1;
}

.stat-label {
    color: #6c757d;
    font-size: 0.9rem;
}

/* Tables */
.table-responsive {
    border-radius: 10px;
    overflow: hidden;
}

.table {
    margin-bottom: 0;
}

.table th {
    border-top: none;
    font-weight: 600;
    background: #f8f9fa;
}

.table-hover tbody tr:hover {
    background-color: rgba(26, 86, 219, 0.05);
}

/* Badges */
.badge {
    font-size: 0.75em;
    padding: 0.35em 0.65em;
}

.status-pending { background-color: #ffc107; color: #000; }
.status-confirmed { background-color: #17a2b8; color: #fff; }
.status-in_progress { background-color: #fd7e14; color: #fff; }
.status-completed { background-color: #28a745; color: #fff; }
.status-cancelled { background-color: #dc3545; color: #fff; }

.role-admin { background-color: #dc3545; color: #fff; }
.role-service { background-color: #fd7e14; color: #fff; }
.role-client { background-color: #6f42c1; color: #fff; }

.payment-pending { background-color: #ffc107; color: #000; }
.payment-paid { background-color: #28a745; color: #fff; }
.payment-failed { background-color: #dc3545; color: #fff; }
.payment-refunded { background-color: #6c757d; color: #fff; }

/* Action Buttons */
.action-buttons {
    display: flex;
    gap: 0.5rem;
}

.action-buttons .btn {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
}

/* Stock Indicators */
.stock-badge {
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-weight: 600;
}

.stock-badge.low { background-color: #f8d7da; color: #721c24; }
.stock-badge.medium { background-color: #fff3cd; color: #856404; }
.stock-badge.high { background-color: #d1edff; color: #004085; }

/* Empty State */
.empty-state {
    text-align: center;
    padding: 3rem 1rem;
    color: #6c757d;
}

.empty-state i {
    margin-bottom: 1rem;
    opacity: 0.5;
}

.empty-state h5 {
    margin-bottom: 0.5rem;
}

/* Search Box */
.search-box {
    max-width: 300px;
}

.header-actions {
    display: flex;
    gap: 1rem;
    align-items: center;
}

/* Modal Styles */
.modal-header {
    background: linear-gradient(135deg, #1a56db 0%, #0e7490 100%);
    color: white;
}

.modal-header .btn-close {
    filter: invert(1);
}

/* Form Styles */
.form-label {
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.form-control, .form-select {
    border-radius: 0.375rem;
    border: 1px solid #ced4da;
    padding: 0.5rem 0.75rem;
}

.form-control:focus, .form-select:focus {
    border-color: #1a56db;
    box-shadow: 0 0 0 0.2rem rgba(26, 86, 219, 0.25);
}

/* Quick Actions */
.quick-actions {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
}

.quick-action-btn {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1.5rem;
    background: white;
    border: 1px solid #e9ecef;
    border-radius: 10px;
    text-decoration: none;
    color: #495057;
    transition: all 0.3s ease;
}

.quick-action-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    color: #1a56db;
    border-color: #1a56db;
}

.quick-action-btn i {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: #1a56db;
}

.quick-action-btn span {
    font-weight: 600;
}

/* Booking Rows */
.booking-row.status-pending { border-left: 4px solid #ffc107; }
.booking-row.status-confirmed { border-left: 4px solid #17a2b8; }
.booking-row.status-in_progress { border-left: 4px solid #fd7e14; }
.booking-row.status-completed { border-left: 4px solid #28a745; }
.booking-row.status-cancelled { border-left: 4px solid #dc3545; }

/* Customer Info */
.customer-info strong {
    display: block;
}

.customer-info small {
    font-size: 0.875em;
}

/* Report Options */
.report-option {
    text-align: center;
    padding: 2rem;
    background: white;
    border: 1px solid #e9ecef;
    border-radius: 10px;
    height: 100%;
}

.report-option i {
    color: #1a56db;
    margin-bottom: 1rem;
}

.report-option h5 {
    margin-bottom: 0.5rem;
}

.report-option p {
    color: #6c757d;
    margin-bottom: 1.5rem;
}

/* Loading Spinner */
.loading-spinner {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
}

/* Responsive Design */
@media (max-width: 768px) {
    .dashboard-title {
        font-size: 2rem;
    }
    
    .dashboard-actions {
        margin-top: 1rem;
    }
    
    .stat-card {
        flex-direction: column;
        text-align: center;
    }
    
    .stat-icon {
        margin-right: 0;
        margin-bottom: 1rem;
    }
    
    .header-actions {
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .action-buttons {
        flex-direction: column;
    }
    
    .quick-actions {
        grid-template-columns: 1fr;
    }
}

/* Chart Containers */
canvas {
    max-width: 100%;
    height: auto;
}

/* Filter Buttons */
.btn-group .btn {
    border-radius: 0.375rem;
}

.btn-group .btn:not(:first-child) {
    margin-left: -1px;
}

.btn-group .btn:first-child {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}

.btn-group .btn:last-child {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
}

/* Low Stock Warning */
.low-stock {
    background-color: #fff5f5;
}

.low-stock:hover {
    background-color: #ffe6e6;
}

.expired {
    opacity: 0.6;
    background-color: #f8f9fa;
}

/* Service Type Badges */
.service-type {
    background-color: #e3f2fd;
    color: #1976d2;
}

.category-badge {
    background-color: #f3e5f5;
    color: #7b1fa2;
}

.type-percentage {
    background-color: #e8f5e8;
    color: #388e3c;
}

.type-fixed {
    background-color: #e3f2fd;
    color: #1976d2;
}}

and admin.js is [ // Admin Dashboard JavaScript
document.addEventListener('DOMContentLoaded', function() {
    initializeAdminDashboard();
});

function initializeAdminDashboard() {
    // Initialize search functionality
    initializeSearch();
    
    // Initialize modal handlers
    initializeModals();
    
    // Initialize table sorting
    initializeTableSorting();
    
    // Load analytics if on reports page
    if (document.getElementById('revenueChart')) {
        loadAnalytics();
    }
}

function initializeSearch() {
    // User search
    const userSearch = document.getElementById('userSearch');
    if (userSearch) {
        userSearch.addEventListener('input', function() {
            filterTable('usersTable', this.value);
        });
    }
    
    // Service search
    const serviceSearch = document.getElementById('serviceSearch');
    if (serviceSearch) {
        serviceSearch.addEventListener('input', function() {
            filterTable('servicesTable', this.value);
        });
    }
    
    // Part search
    const partSearch = document.getElementById('partSearch');
    if (partSearch) {
        partSearch.addEventListener('input', function() {
            filterTable('partsTable', this.value);
        });
    }
    
    // Discount search
    const discountSearch = document.getElementById('discountSearch');
    if (discountSearch) {
        discountSearch.addEventListener('input', function() {
            filterTable('discountsTable', this.value);
        });
    }
    
    // Booking search
    const bookingSearch = document.getElementById('bookingSearch');
    if (bookingSearch) {
        bookingSearch.addEventListener('input', function() {
            filterTable('bookingsTable', this.value);
        });
    }
    
    // Order search
    const orderSearch = document.getElementById('orderSearch');
    if (orderSearch) {
        orderSearch.addEventListener('input', function() {
            filterTable('ordersTable', this.value);
        });
    }
}

function filterTable(tableId, searchText) {
    const table = document.getElementById(tableId);
    if (!table) return;
    
    const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
    const searchLower = searchText.toLowerCase();
    
    for (let row of rows) {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(searchLower) ? '' : 'none';
    }
}

function initializeModals() {
    // User modals
    initializeUserModals();
    
    // Service modals
    initializeServiceModals();
    
    // Part modals
    initializePartModals();
    
    // Discount modals
    initializeDiscountModals();
    
    // Booking modals
    initializeBookingModals();
    
    // Order modals
    initializeOrderModals();
}

function initializeUserModals() {
    // Edit user buttons
    const editButtons = document.querySelectorAll('.edit-user');
    editButtons.forEach(button => {
        button.addEventListener('click', function() {
            const userId = this.getAttribute('data-user-id');
            const username = this.getAttribute('data-username');
            const email = this.getAttribute('data-email');
            const phone = this.getAttribute('data-phone');
            const role = this.getAttribute('data-role');
            const status = this.getAttribute('data-status');
            
            document.getElementById('editUserId').value = userId;
            document.getElementById('editUsername').value = username;
            document.getElementById('editEmail').value = email;
            document.getElementById('editPhone').value = phone;
            document.getElementById('editRole').value = role;
            document.getElementById('editStatus').checked = status === '1';
            
            const modal = new bootstrap.Modal(document.getElementById('editUserModal'));
            modal.show();
        });
    });
    
    // Delete user buttons
    const deleteButtons = document.querySelectorAll('.delete-user');
    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            const userId = this.getAttribute('data-user-id');
            if (confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
                deleteUser(userId);
            }
        });
    });
    
    // Add user form
    const addUserForm = document.getElementById('addUserForm');
    if (addUserForm) {
        addUserForm.addEventListener('submit', function(e) {
            e.preventDefault();
            addUser();
        });
    }
    
    // Edit user form
    const editUserForm = document.getElementById('editUserForm');
    if (editUserForm) {
        editUserForm.addEventListener('submit', function(e) {
            e.preventDefault();
            updateUser();
        });
    }
}

function initializeServiceModals() {
    // Edit service buttons
    const editButtons = document.querySelectorAll('.edit-service');
    editButtons.forEach(button => {
        button.addEventListener('click', function() {
            const serviceId = this.getAttribute('data-service-id');
            const name = this.getAttribute('data-name');
            const description = this.getAttribute('data-description');
            const price = this.getAttribute('data-price');
            const duration = this.getAttribute('data-duration');
            const type = this.getAttribute('data-type');
            const status = this.getAttribute('data-status');
            const featured = this.getAttribute('data-featured');
            
            document.getElementById('editServiceId').value = serviceId;
            document.getElementById('editServiceName').value = name;
            document.getElementById('editServiceDescription').value = description;
            document.getElementById('editServicePrice').value = price;
            document.getElementById('editServiceDuration').value = duration;
            document.getElementById('editServiceType').value = type;
            document.getElementById('editServiceStatus').checked = status === '1';
            document.getElementById('editServiceFeatured').checked = featured === '1';
            
            const modal = new bootstrap.Modal(document.getElementById('editServiceModal'));
            modal.show();
        });
    });
    
    // Delete service buttons
    const deleteButtons = document.querySelectorAll('.delete-service');
    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            const serviceId = this.getAttribute('data-service-id');
            if (confirm('Are you sure you want to delete this service? This action cannot be undone.')) {
                deleteService(serviceId);
            }
        });
    });
    
    // Add service form
    const addServiceForm = document.getElementById('addServiceForm');
    if (addServiceForm) {
        addServiceForm.addEventListener('submit', function(e) {
            e.preventDefault();
            addService();
        });
    }
    
    // Edit service form
    const editServiceForm = document.getElementById('editServiceForm');
    if (editServiceForm) {
        editServiceForm.addEventListener('submit', function(e) {
            e.preventDefault();
            updateService();
        });
    }
}

function initializePartModals() {
    // Edit part buttons
    const editButtons = document.querySelectorAll('.edit-part');
    editButtons.forEach(button => {
        button.addEventListener('click', function() {
            const partId = this.getAttribute('data-part-id');
            const name = this.getAttribute('data-name');
            const description = this.getAttribute('data-description');
            const price = this.getAttribute('data-price');
            const stock = this.getAttribute('data-stock');
            const category = this.getAttribute('data-category');
            const status = this.getAttribute('data-status');
            
            document.getElementById('editPartId').value = partId;
            document.getElementById('editPartName').value = name;
            document.getElementById('editPartDescription').value = description;
            document.getElementById('editPartPrice').value = price;
            document.getElementById('editPartStock').value = stock;
            document.getElementById('editPartCategory').value = category;
            document.getElementById('editPartStatus').checked = status === '1';
            
            const modal = new bootstrap.Modal(document.getElementById('editPartModal'));
            modal.show();
        });
    });
    
    // Delete part buttons
    const deleteButtons = document.querySelectorAll('.delete-part');
    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            const partId = this.getAttribute('data-part-id');
            if (confirm('Are you sure you want to delete this part? This action cannot be undone.')) {
                deletePart(partId);
            }
        });
    });
    
    // Restock part buttons
    const restockButtons = document.querySelectorAll('.restock-part');
    restockButtons.forEach(button => {
        button.addEventListener('click', function() {
            const partId = this.getAttribute('data-part-id');
            const partName = this.getAttribute('data-part-name');
            
            document.getElementById('restockPartId').value = partId;
            document.getElementById('restockPartName').textContent = partName;
            
            const modal = new bootstrap.Modal(document.getElementById('restockModal'));
            modal.show();
        });
    });
    
    // Add part form
    const addPartForm = document.getElementById('addPartForm');
    if (addPartForm) {
        addPartForm.addEventListener('submit', function(e) {
            e.preventDefault();
            addPart();
        });
    }
    
    // Edit part form
    const editPartForm = document.getElementById('editPartForm');
    if (editPartForm) {
        editPartForm.addEventListener('submit', function(e) {
            e.preventDefault();
            updatePart();
        });
    }
    
    // Restock form
    const restockForm = document.getElementById('restockForm');
    if (restockForm) {
        restockForm.addEventListener('submit', function(e) {
            e.preventDefault();
            restockPart();
        });
    }
}

function initializeDiscountModals() {
    // Edit discount buttons
    const editButtons = document.querySelectorAll('.edit-discount');
    editButtons.forEach(button => {
        button.addEventListener('click', function() {
            const discountId = this.getAttribute('data-discount-id');
            const code = this.getAttribute('data-code');
            const type = this.getAttribute('data-type');
            const value = this.getAttribute('data-value');
            const minOrder = this.getAttribute('data-min-order');
            const expiry = this.getAttribute('data-expiry');
            const usageLimit = this.getAttribute('data-usage-limit');
            const status = this.getAttribute('data-status');
            
            document.getElementById('editDiscountId').value = discountId;
            document.getElementById('editDiscountCode').value = code;
            document.getElementById('editDiscountType').value = type;
            document.getElementById('editDiscountValue').value = value;
            document.getElementById('editMinOrderValue').value = minOrder;
            document.getElementById('editExpiryDate').value = expiry;
            document.getElementById('editUsageLimit').value = usageLimit;
            document.getElementById('editDiscountStatus').checked = status === '1';
            
            updateValueSuffix();
            
            const modal = new bootstrap.Modal(document.getElementById('editDiscountModal'));
            modal.show();
        });
    });
    
    // Delete discount buttons
    const deleteButtons = document.querySelectorAll('.delete-discount');
    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            const discountId = this.getAttribute('data-discount-id');
            if (confirm('Are you sure you want to delete this discount code? This action cannot be undone.')) {
                deleteDiscount(discountId);
            }
        });
    });
    
    // Discount type change handlers
    const discountType = document.getElementById('discountType');
    if (discountType) {
        discountType.addEventListener('change', updateValueSuffix);
    }
    
    const editDiscountType = document.getElementById('editDiscountType');
    if (editDiscountType) {
        editDiscountType.addEventListener('change', updateValueSuffix);
    }
    
    // Add discount form
    const addDiscountForm = document.getElementById('addDiscountForm');
    if (addDiscountForm) {
        addDiscountForm.addEventListener('submit', function(e) {
            e.preventDefault();
            addDiscount();
        });
    }
    
    // Edit discount form
    const editDiscountForm = document.getElementById('editDiscountForm');
    if (editDiscountForm) {
        editDiscountForm.addEventListener('submit', function(e) {
            e.preventDefault();
            updateDiscount();
        });
    }
}

function updateValueSuffix() {
    const type = document.getElementById('discountType') ? document.getElementById('discountType').value : 
                 document.getElementById('editDiscountType').value;
    const suffix = type === 'percentage' ? '%' : '$';
    
    const suffixElement = document.getElementById('valueSuffix') || document.getElementById('editValueSuffix');
    if (suffixElement) {
        suffixElement.textContent = suffix;
    }
}

function initializeBookingModals() {
    // View booking buttons
    const viewButtons = document.querySelectorAll('.view-booking');
    viewButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const bookingId = this.getAttribute('data-booking-id');
            viewBookingDetails(bookingId);
        });
    });
    
    // Assign booking buttons
    const assignButtons = document.querySelectorAll('.assign-booking');
    assignButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const bookingId = this.getAttribute('data-booking-id');
            document.getElementById('assignBookingId').value = bookingId;
            
            const modal = new bootstrap.Modal(document.getElementById('assignTechnicianModal'));
            modal.show();
        });
    });
    
    // Update status buttons
    const statusButtons = document.querySelectorAll('.update-status');
    statusButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const bookingId = this.getAttribute('data-booking-id');
            document.getElementById('statusBookingId').value = bookingId;
            
            const modal = new bootstrap.Modal(document.getElementById('updateStatusModal'));
            modal.show();
        });
    });
    
    // Delete booking buttons
    const deleteButtons = document.querySelectorAll('.delete-booking');
    deleteButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const bookingId = this.getAttribute('data-booking-id');
            if (confirm('Are you sure you want to delete this booking? This action cannot be undone.')) {
                deleteBooking(bookingId);
            }
        });
    });
    
    // Assign technician form
    const assignForm = document.getElementById('assignTechnicianForm');
    if (assignForm) {
        assignForm.addEventListener('submit', function(e) {
            e.preventDefault();
            assignTechnician();
        });
    }
    
    // Update status form
    const statusForm = document.getElementById('updateStatusForm');
    if (statusForm) {
        statusForm.addEventListener('submit', function(e) {
            e.preventDefault();
            updateBookingStatus();
        });
    }
}

function initializeOrderModals() {
    // View order buttons
    const viewButtons = document.querySelectorAll('.view-order');
    viewButtons.forEach(button => {
        button.addEventListener('click', function() {
            const orderId = this.getAttribute('data-order-id');
            viewOrderDetails(orderId);
        });
    });
    
    // Mark paid buttons
    const markPaidButtons = document.querySelectorAll('.mark-paid');
    markPaidButtons.forEach(button => {
        button.addEventListener('click', function() {
            const orderId = this.getAttribute('data-order-id');
            if (confirm('Mark this order as paid?')) {
                markOrderPaid(orderId);
            }
        });
    });
    
    // Delete order buttons
    const deleteButtons = document.querySelectorAll('.delete-order');
    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            const orderId = this.getAttribute('data-order-id');
            if (confirm('Are you sure you want to delete this order? This action cannot be undone.')) {
                deleteOrder(orderId);
            }
        });
    });
}

function initializeTableSorting() {
    // Add sorting functionality to all tables
    const tables = document.querySelectorAll('table');
    tables.forEach(table => {
        const headers = table.querySelectorAll('th');
        headers.forEach((header, index) => {
            header.style.cursor = 'pointer';
            header.addEventListener('click', () => {
                sortTable(table, index);
            });
        });
    });
}

function sortTable(table, columnIndex) {
    const tbody = table.querySelector('tbody');
    const rows = Array.from(tbody.querySelectorAll('tr'));
    
    const isAscending = table.getAttribute('data-sort-direction') !== 'asc';
    
    rows.sort((a, b) => {
        const aValue = a.cells[columnIndex].textContent.trim();
        const bValue = b.cells[columnIndex].textContent.trim();
        
        // Try to parse as number
        const aNum = parseFloat(aValue.replace(/[^0-9.-]+/g, ''));
        const bNum = parseFloat(bValue.replace(/[^0-9.-]+/g, ''));
        
        if (!isNaN(aNum) && !isNaN(bNum)) {
            return isAscending ? aNum - bNum : bNum - aNum;
        }
        
        // Otherwise sort as string
        return isAscending ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
    });
    
    // Remove existing rows
    while (tbody.firstChild) {
        tbody.removeChild(tbody.firstChild);
    }
    
    // Add sorted rows
    rows.forEach(row => tbody.appendChild(row));
    
    // Update sort direction
    table.setAttribute('data-sort-direction', isAscending ? 'asc' : 'desc');
}

// API Functions
async function addUser() {
    const form = document.getElementById('addUserForm');
    const formData = new FormData(form);
    
    try {
        const response = await fetch('/api/admin/add_user', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(Object.fromEntries(formData))
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert('User added successfully!');
            location.reload();
        } else {
            alert('Error adding user: ' + result.error);
        }
    } catch (error) {
        alert('Error adding user: ' + error.message);
    }
}

async function updateUser() {
    const form = document.getElementById('editUserForm');
    const formData = new FormData(form);
    
    try {
        const response = await fetch('/api/admin/update_user', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(Object.fromEntries(formData))
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert('User updated successfully!');
            location.reload();
        } else {
            alert('Error updating user: ' + result.error);
        }
    } catch (error) {
        alert('Error updating user: ' + error.message);
    }
}

async function deleteUser(userId) {
    try {
        const response = await fetch('/api/admin/delete_user', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ user_id: userId })
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert('User deleted successfully!');
            location.reload();
        } else {
            alert('Error deleting user: ' + result.error);
        }
    } catch (error) {
        alert('Error deleting user: ' + error.message);
    }
}

// Similar functions for services, parts, discounts, bookings, orders...

function deleteService(serviceId) {
    $.ajax({
        url: '/api/delete_service/' + serviceId,
        method: 'POST',
        success: function(response) {
            if (response.success) {
                showToast('Service deleted successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast('Error: ' + response.error, 'error');
            }
        },
        error: function(xhr) {
            showToast('Error deleting service: ' + xhr.responseText, 'error');
        }
    });
}

function deletePart(partId) {
    $.ajax({
        url: '/api/delete_car_part/' + partId,
        method: 'POST',
        success: function(response) {
            if (response.success) {
                showToast('Car part deleted successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast('Error: ' + response.error, 'error');
            }
        },
        error: function(xhr) {
            showToast('Error deleting car part: ' + xhr.responseText, 'error');
        }
    });
}

// Analytics and Charts
async function loadAnalytics() {
    const period = document.getElementById('reportPeriod').value;
    
    try {
        const response = await fetch(`/api/admin/analytics?period=${period}`);
        const data = await response.json();
        
        updateMetrics(data);
        renderCharts(data);
    } catch (error) {
        console.error('Error loading analytics:', error);
    }
}

function updateMetrics(data) {
    // Update total revenue
    const totalRevenue = data.revenue.data.reduce((sum, value) => sum + value, 0);
    document.getElementById('totalRevenue').textContent = '$' + totalRevenue.toFixed(2);
    
    // Update total orders (you would need to get this from your data)
    document.getElementById('totalOrders').textContent = data.orders || 0;
    
    // Update total bookings
    const totalBookings = data.bookings.reduce((sum, value) => sum + value, 0);
    document.getElementById('totalBookings').textContent = totalBookings;
    
    // Update new customers
    const newCustomers = data.customers.data.reduce((sum, value) => sum + value, 0);
    document.getElementById('newCustomers').textContent = newCustomers;
}

function renderCharts(data) {
    // Revenue chart
    renderRevenueChart(data.revenue);
    
    // Bookings chart
    renderBookingsChart(data.bookings);
    
    // Services chart
    renderServicesChart(data.services);
    
    // Customers chart
    renderCustomersChart(data.customers);
}

function renderRevenueChart(revenueData) {
    const ctx = document.getElementById('revenueChart').getContext('2d');
    
    new Chart(ctx, {
        type: 'line',
        data: {
            labels: revenueData.labels,
            datasets: [{
                label: 'Revenue',
                data: revenueData.data,
                borderColor: '#1a56db',
                backgroundColor: 'rgba(26, 86, 219, 0.1)',
                tension: 0.4,
                fill: true
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return '$' + value;
                        }
                    }
                }
            }
        }
    });
}

function renderBookingsChart(bookingsData) {
    const ctx = document.getElementById('bookingsChart').getContext('2d');
    
    new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ['Pending', 'Confirmed', 'In Progress', 'Completed', 'Cancelled'],
            datasets: [{
                data: bookingsData,
                backgroundColor: [
                    '#ffc107',
                    '#17a2b8',
                    '#fd7e14',
                    '#28a745',
                    '#dc3545'
                ]
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });
}

function renderServicesChart(servicesData) {
    const ctx = document.getElementById('servicesChart').getContext('2d');
    
    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: servicesData.labels,
            datasets: [{
                label: 'Bookings',
                data: servicesData.data,
                backgroundColor: '#1a56db'
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

function renderCustomersChart(customersData) {
    const ctx = document.getElementById('customersChart').getContext('2d');
    
    new Chart(ctx, {
        type: 'line',
        data: {
            labels: customersData.labels,
            datasets: [{
                label: 'New Customers',
                data: customersData.data,
                borderColor: '#28a745',
                backgroundColor: 'rgba(40, 167, 69, 0.1)',
                tension: 0.4,
                fill: true
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    display: false
                }
            }
        }
    });
}

// Report Generation
function generateSalesReport() {
    showLoading();
    // Implementation for sales report generation
    hideLoading();
}

function generateServiceReport() {
    showLoading();
    // Implementation for service report generation
    hideLoading();
}

function generateInventoryReport() {
    showLoading();
    // Implementation for inventory report generation
    hideLoading();
}

function showLoading() {
    document.getElementById('loadingSpinner').style.display = 'flex';
}

function hideLoading() {
    document.getElementById('loadingSpinner').style.display = 'none';
}

// Utility Functions
function filterBookings(status) {
    const rows = document.querySelectorAll('#bookingsTable tbody tr');
    
    rows.forEach(row => {
        if (status === 'all' || row.classList.contains('status-' + status)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}

function filterOrders(status) {
    const rows = document.querySelectorAll('#ordersTable tbody tr');
    
    rows.forEach(row => {
        if (status === 'all' || row.classList.contains('status-' + status)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}

// Date filtering
const dateFilter = document.getElementById('dateFilter');
if (dateFilter) {
    dateFilter.addEventListener('change', function() {
        filterByDate(this.value);
    });
}

function filterByDate(date) {
    const rows = document.querySelectorAll('#bookingsTable tbody tr');
    
    rows.forEach(row => {
        const dateCell = row.cells[4].textContent;
        if (!date || dateCell.includes(date)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}

// Print functionality
function printReport() {
    window.print();
}

function downloadReport() {
    // Implementation for PDF download
    alert('PDF download functionality would be implemented here');
}

// Add these functions to handle service and car part operations

function addService() {
    const formEl = document.getElementById('addServiceForm');
    const fd = new FormData(formEl);
    // Ensure number/boolean casting if needed
    fd.set('price', parseFloat(fd.get('price') || 0));
    fd.set('duration', parseInt(fd.get('duration') || 0));
    fd.set('is_active', $('#serviceStatus').is(':checked'));
    fd.set('is_featured', $('#serviceFeatured').is(':checked'));

    $.ajax({
        url: '/api/add_service',
        method: 'POST',
        data: fd,
        processData: false,
        contentType: false,
        success: function(response) {
            if (response.success) {
                $('#addServiceModal').modal('hide');
                $('#addServiceForm')[0].reset();
                showToast('Service added successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast('Error: ' + response.error, 'error');
            }
        },
        error: function(xhr) {
            showToast('Error adding service: ' + xhr.responseText, 'error');
        }
    });
}

function updateService() {
    const formEl = document.getElementById('editServiceForm');
    const fd = new FormData(formEl);
    fd.set('price', parseFloat(fd.get('price') || 0));
    fd.set('duration', parseInt(fd.get('duration') || 0));
    fd.set('is_active', $('#editServiceStatus').is(':checked'));
    fd.set('is_featured', $('#editServiceFeatured').is(':checked'));

    $.ajax({
        url: '/api/update_service',
        method: 'POST',
        data: fd,
        processData: false,
        contentType: false,
        success: function(response) {
            if (response.success) {
                $('#editServiceModal').modal('hide');
                showToast('Service updated successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast('Error: ' + response.error, 'error');
            }
        },
        error: function(xhr) {
            showToast('Error updating service: ' + xhr.responseText, 'error');
        }
    });
}

function addCarPart() {
    const formEl = document.getElementById('addPartForm');
    const fd = new FormData(formEl);
    fd.set('price', parseFloat(fd.get('price') || 0));
    fd.set('stock', parseInt(fd.get('stock') || 0));
    fd.set('is_active', $('#partStatus').is(':checked'));

    $.ajax({
        url: '/api/add_car_part',
        method: 'POST',
        data: fd,
        processData: false,
        contentType: false,
        success: function(response) {
            if (response.success) {
                $('#addPartModal').modal('hide');
                $('#addPartForm')[0].reset();
                showToast('Car part added successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast('Error: ' + response.error, 'error');
            }
        },
        error: function(xhr) {
            showToast('Error adding part: ' + xhr.responseText, 'error');
        }
    });
}

function updatePart() {
    const formEl = document.getElementById('editPartForm');
    const fd = new FormData(formEl);
    fd.set('price', parseFloat(fd.get('price') || 0));
    fd.set('stock', parseInt(fd.get('stock') || 0));
    fd.set('is_active', $('#editPartStatus').is(':checked'));

    $.ajax({
        url: '/api/update_car_part',
        method: 'POST',
        data: fd,
        processData: false,
        contentType: false,
        success: function(response) {
            if (response.success) {
                $('#editPartModal').modal('hide');
                showToast('Car part updated successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast('Error: ' + (response.error || 'Unknown error'), 'error');
            }
        },
        error: function(xhr) {
            showToast('Error updating part: ' + xhr.responseText, 'error');
        }
    });
}

// Toast notification system
function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">${message}</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    `;
    
    const toastContainer = document.getElementById('toastContainer') || createToastContainer();
    toastContainer.appendChild(toast);
    
    const bsToast = new bootstrap.Toast(toast);
    bsToast.show();
    
    setTimeout(() => toast.remove(), 3000);
}

function createToastContainer() {
    const container = document.createElement('div');
    container.id = 'toastContainer';
    container.className = 'toast-container position-fixed top-0 end-0 p-3';
    container.style.zIndex = '9999';
    document.body.appendChild(container);
    return container;
}

// Service management functions
function addService() {
    const formData = {
        name: $('#serviceName').val(),
        description: $('#serviceDescription').val(),
        price: parseFloat($('#servicePrice').val()),
        duration: parseInt($('#serviceDuration').val()),
        service_type: $('#serviceType').val(),
        is_active: $('#serviceStatus').is(':checked'),
        is_featured: $('#serviceFeatured').is(':checked')
    };

    $.ajax({
        url: '/api/add_service',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(formData),
        success: function(response) {
            if (response.success) {
                $('#addServiceModal').modal('hide');
                $('#addServiceForm')[0].reset();
                showToast('Service added successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast('Error: ' + response.error, 'error');
            }
        },
        error: function(xhr) {
            showToast('Error adding service: ' + xhr.responseText, 'error');
        }
    });
}

function updateService() {
    const formData = {
        id: $('#editServiceId').val(),
        name: $('#editServiceName').val(),
        description: $('#editServiceDescription').val(),
        price: parseFloat($('#editServicePrice').val()),
        duration: parseInt($('#editServiceDuration').val()),
        service_type: $('#editServiceType').val(),
        is_active: $('#editServiceStatus').is(':checked'),
        is_featured: $('#editServiceFeatured').is(':checked')
    };

    $.ajax({
        url: '/api/update_service',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(formData),
        success: function(response) {
            if (response.success) {
                $('#editServiceModal').modal('hide');
                showToast('Service updated successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast('Error: ' + response.error, 'error');
            }
        },
        error: function(xhr) {
            showToast('Error updating service: ' + xhr.responseText, 'error');
        }
    });
}

// Car parts management functions
function addCarPart() {
    const formData = {
        name: $('#partName').val(),
        price: parseFloat($('#partPrice').val()),
        stock: parseInt($('#partStock').val()),
        description: $('#partDescription').val(),
        category: $('#partCategory').val()
    };

    $.ajax({
        url: '/api/add_car_part',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(formData),
        success: function(response) {
            if (response.success) {
                $('#addPartModal').modal('hide');
                $('#addPartForm')[0].reset();
                showToast('Car part added successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast('Error: ' + response.error, 'error');
            }
        },
        error: function(xhr) {
            showToast('Error adding car part: ' + xhr.responseText, 'error');
        }
    });
}

function updateCarPart() {
    // Create a FormData object from the form
    const formEl = document.getElementById('editPartForm');
    const fd = new FormData(formEl);
    
    // Ensure numeric values are properly formatted
    fd.set('price', parseFloat(fd.get('price') || 0));
    fd.set('stock', parseInt(fd.get('stock') || 0));
    fd.set('is_active', $('#editPartStatus').is(':checked'));
    
    $.ajax({
        url: '/api/update_car_part',
        method: 'POST',
        data: fd,
        processData: false,
        contentType: false,
        success: function(response) {
            if (response.success) {
                $('#editPartModal').modal('hide');
                showToast('Car part updated successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showToast('Error: ' + (response.error || 'Unknown error'), 'error');
            }
        },
        error: function(xhr) {
            showToast('Error updating car part: ' + xhr.responseText, 'error');
        }
    });
}]
 and admin.html is [{% extends "base.html" %}

{% block title %}Admin Dashboard - Future Mech{% endblock %}

{% block styles %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard_admin.css') }}">
{% endblock %}

{% block content %}
<div class="dashboard-container">
    <section class="dashboard-header">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-8">
                    <h1 class="dashboard-title">Admin Dashboard</h1>
                    <p class="dashboard-subtitle">Manage your automotive service platform</p>
            </div>
                <div class="col-lg-4 dashboard-actions">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-light" data-bs-toggle="modal" data-bs-target="#addServiceModal">
                            <i class="fas fa-plus me-2"></i>Add Service
                </button>
                        <button type="button" class="btn btn-light" data-bs-toggle="modal" data-bs-target="#addPartModal">
                            <i class="fas fa-cog me-2"></i>Add Part
                    </button>
                </div>
                    </div>
                </div>
            </div>
    </section>

    <div class="container py-5">
        <!-- Stats Overview -->
        <div class="row g-4 mb-5">
            <div class="col-lg-3 col-md-6">
                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="stat-content">
                        <div class="stat-number">{{ stats.total_users }}</div>
                        <div class="stat-label">Total Users</div>
                        </div>
                    </div>
                        </div>
            <div class="col-lg-3 col-md-6">
                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-calendar-check"></i>
                        </div>
                        <div class="stat-content">
                        <div class="stat-number">{{ stats.total_bookings }}</div>
                        <div class="stat-label">Total Bookings</div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-shopping-cart"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number">{{ stats.total_orders }}</div>
                        <div class="stat-label">Total Orders</div>
                    </div>
                        </div>
                    </div>
            <div class="col-lg-3 col-md-6">
                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-dollar-sign"></i>
                        </div>
                        <div class="stat-content">
                        <div class="stat-number">₹{{ "%.2f"|format(stats.total_revenue) }}</div>
                        <div class="stat-label">Total Revenue</div>
                    </div>
                        </div>
                    </div>
                </div>

                <!-- Quick Actions -->
        <div class="row g-4 mb-5">
            <div class="col-12">
                <div class="dashboard-card">
                    <div class="card-header">
                        <h4 class="card-title">Quick Actions</h4>
                    </div>
                    <div class="card-body">
                <div class="quick-actions">
                            <a href="{{ url_for('admin_users') }}" class="quick-action-btn">
                                <i class="fas fa-users"></i>
                                <span>Manage Users</span>
                            </a>
                            <a href="{{ url_for('admin_services') }}" class="quick-action-btn">
                                <i class="fas fa-wrench"></i>
                                <span>Manage Services</span>
                            </a>
                            <a href="{{ url_for('admin_car_parts') }}" class="quick-action-btn">
                            <i class="fas fa-cog"></i>
                                <span>Manage Parts</span>
                            </a>
                            <!-- Change this line -->
                            <a href="{{ url_for('admin_bookings') }}" class="quick-action-btn">
                                <i class="fas fa-chart-bar"></i>
                                <span>View Reports</span>
                            </a>
                        </div>
                    </div>
                </div>
                    </div>
                </div>

        <!-- Recent Activity -->
        <div class="row g-4">
            <div class="col-lg-6">
                <div class="dashboard-card">
                    <div class="card-header">
                        <h4 class="card-title">Recent Bookings</h4>
                        <a href="{{ url_for('admin_bookings') }}" class="btn btn-sm btn-outline-primary">View All</a>
                    </div>
                    <div class="card-body">
                        {% if recent_bookings %}
                        <div class="bookings-list">
                        {% for booking in recent_bookings %}
                            <div class="booking-item">
                                <div class="booking-info">
                                    <div class="booking-service">{{ booking.service_name }}</div>
                                    <div class="booking-date">
                                        <i class="fas fa-calendar me-1"></i>
                                        {{ booking.scheduled_date.strftime('%b %d, %Y %I:%M %p') }}
                            </div>
                                    <div class="booking-customer">{{ booking.customer_name }}</div>
                            </div>
                                <div class="booking-status">
                                    <span class="badge status-{{ booking.status }}">{{ booking.status.replace('_', ' ').title() }}</span>
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                        {% else %}
                        <div class="empty-state">
                            <i class="fas fa-calendar-times fa-3x"></i>
                            <h5>No Recent Bookings</h5>
                            <p>No bookings have been made recently.</p>
                </div>
                        {% endif %}
                        </div>
                        </div>
                    </div>

            <div class="col-lg-6">
                <div class="dashboard-card">
                    <div class="card-header">
                        <h4 class="card-title">Recent Orders</h4>
                        <a href="{{ url_for('admin_orders') }}" class="btn btn-sm btn-outline-primary">View All</a>
                    </div>
                    <div class="card-body">
                        {% if recent_orders %}
                    <div class="table-responsive">
                            <table class="table">
                            <thead>
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer</th>
                                    <th>Total</th>
                                        <th>Status</th>
                                </tr>
                            </thead>
                                <tbody>
                                    {% for order in recent_orders %}
                                    <tr>
                                        <td>#{{ order.id }}</td>
                                        <td>{{ order.customer_name }}</td>
                                        <td>₹{{ "%.2f"|format(order.total_price) }}</td>
                                        <td>
                                            <span class="badge bg-{{ 'success' if order.payment_status == 'paid' else 'warning' }}">
                                                {{ order.payment_status.title() }}
                                            </span>
                                        </td>
                                    </tr>
                                    {% endfor %}
                            </tbody>
                        </table>
                    </div>
                        {% else %}
                        <div class="empty-state">
                            <i class="fas fa-shopping-cart fa-3x"></i>
                            <h5>No Recent Orders</h5>
                            <p>No orders have been placed recently.</p>
                </div>
                        {% endif %}
                        </div>
                    </div>
                </div>
        </div>
    </div>
</div>

<!-- Add Service Modal -->
<div class="modal fade" id="addServiceModal" tabindex="-1" aria-labelledby="addServiceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addServiceModalLabel">Add New Service</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <!-- Removed incorrect action with url_for('add_service') and kept AJAX form -->
            <form id="addServiceForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="service_name" class="form-label">Service Name</label>
                        <input type="text" class="form-control" id="service_name" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label for="service_description" class="form-label">Description</label>
                        <textarea class="form-control" id="service_description" name="description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="service_price" class="form-label">Price</label>
                        <input type="number" class="form-control" id="service_price" name="price" step="0.01" required>
                    </div>
                    <div class="mb-3">
                        <label for="service_duration" class="form-label">Duration (minutes)</label>
                        <input type="number" class="form-control" id="service_duration" name="duration" value="120">
                    </div>
                    <div class="mb-3">
                        <label for="service_image" class="form-label">Service Image</label>
                        <input type="file" class="form-control" id="service_image" name="image" accept="image/*">
                    </div>
                    <div class="mb-3">
                        <label for="service_type" class="form-label">Service Type</label>
                        <select class="form-select" id="service_type" name="service_type">
                            <option value="Inspection">Inspection</option>
                            <option value="Maintenance">Maintenance</option>
                            <option value="Repair">Repair</option>
                            <option value="Detailing">Detailing</option>
                            <option value="Emergency">Emergency</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Add Service</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Add Part Modal -->
<div class="modal fade" id="addPartModal" tabindex="-1" aria-labelledby="addPartModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addPartModalLabel">Add New Car Part</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <!-- Removed incorrect action with url_for('add_car_part') and kept AJAX form -->
            <form id="addCarPartForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="part_name" class="form-label">Part Name</label>
                        <input type="text" class="form-control" id="part_name" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label for="part_description" class="form-label">Description</label>
                        <textarea class="form-control" id="part_description" name="description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="part_price" class="form-label">Price</label>
                        <input type="number" class="form-control" id="part_price" name="price" step="0.01" required>
                    </div>
                    <div class="mb-3">
                        <label for="part_stock" class="form-label">Stock Quantity</label>
                        <input type="number" class="form-control" id="part_stock" name="stock" value="0">
                    </div>
                    <div class="mb-3">
                        <label for="part_category" class="form-label">Category</label>
                        <select class="form-select" id="part_category" name="category">
                            <option value="Engine">Engine</option>
                            <option value="Brakes">Brakes</option>
                            <option value="Suspension">Suspension</option>
                            <option value="Electrical">Electrical</option>
                            <option value="Exterior">Exterior</option>
                            <option value="Interior">Interior</option>
                            <option value="Tires">Tires</option>
                            <option value="Lighting">Lighting</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="part_brand" class="form-label">Brand</label>
                        <input type="text" class="form-control" id="part_brand" name="brand">
                    </div>
                    <div class="mb-3">
                        <label for="part_image" class="form-label">Part Image</label>
                        <input type="file" class="form-control" id="part_image" name="image" accept="image/*">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Add Part</button>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script src="{{ url_for('static', filename='js/dashboard_admin.js') }}"></script>
{% endblock %}]
as per this provide me all code  fully with responce and work